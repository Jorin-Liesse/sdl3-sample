name: Build for Web
on: [workflow_dispatch]

jobs:
  build-web:
    name: Build demo for Web
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive


      - name: Set project env vars
        run: |
          PROJECT=$(python3 -c "import json; print(json.load(open('assets/info.json'))['project'])")
          COMPANY=$(python3 -c "import json; print(json.load(open('assets/info.json'))['company'])")
          VERSION=$(python3 -c "import json; print(json.load(open('assets/info.json'))['version'])")
          DESCRIPTION=$(python3 -c "import json; print(json.load(open('assets/info.json'))['description'])")
          AUTHOR=$(python3 -c "import json; print(json.load(open('assets/info.json'))['author'])")
          LICENSE=$(python3 -c "import json; print(json.load(open('assets/info.json'))['license'])")
          CREDITS=$(python3 -c "import json; print(json.load(open('assets/info.json'))['credits'])")
          ORIENTATION=$(python3 -c "import json; print(json.load(open('assets/info.json'))['orientation'])")
          WINDOW_MODE=$(python3 -c "import json; print(json.load(open('assets/info.json'))['window-mode'])")
          ICON_PATH=$(python3 -c "import json; print(json.load(open('assets/info.json'))['icon-path'])")
          ASSETS_PATH=$(python3 -c "import json; print(json.load(open('assets/info.json'))['assets-path'])")
          RESOURCES_PATH=$(python3 -c "import json; print(json.load(open('assets/info.json'))['resources-path'])")
          INCLUDE_PATH=$(python3 -c "import json; print(json.load(open('assets/info.json'))['include-path'])")
          SOURCE_PATH=$(python3 -c "import json; print(json.load(open('assets/info.json'))['source-path'])")

          echo "PROJECT=$PROJECT" >> $GITHUB_ENV
          echo "COMPANY=$COMPANY" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "DESCRIPTION=$DESCRIPTION" >> $GITHUB_ENV
          echo "AUTHOR=$AUTHOR" >> $GITHUB_ENV
          echo "LICENSE=$LICENSE" >> $GITHUB_ENV
          echo "CREDITS=$CREDITS" >> $GITHUB_ENV
          echo "ORIENTATION=$ORIENTATION" >> $GITHUB_ENV
          echo "WINDOW_MODE=$WINDOW_MODE" >> $GITHUB_ENV
          echo "ICON_PATH=$ICON_PATH" >> $GITHUB_ENV
          echo "ASSETS_PATH=$ASSETS_PATH" >> $GITHUB_ENV
          echo "RESOURCES_PATH=$RESOURCES_PATH" >> $GITHUB_ENV
          echo "INCLUDE_PATH=$INCLUDE_PATH" >> $GITHUB_ENV
          echo "SOURCE_PATH=$SOURCE_PATH" >> $GITHUB_ENV


      - name: Get Emscripten
        run: |
          git clone https://github.com/emscripten-core/emsdk.git --depth=1
          cd emsdk
          ./emsdk install tot
          ./emsdk activate tot
      - name: Build for web
        run: |
          source emsdk/emsdk_env.sh
          emcmake cmake -S . -B build
          cmake --build build --parallel
      - name: Prepare for upload
        run: |
           mkdir _site
           mv build/${{ env.PROJECT }}.js _site/
           mv build/${{ env.PROJECT }}.data _site/
           mv build/${{ env.PROJECT }}.wasm _site/
           mv ${{ env.RESOURCES_PATH }}/index.html _site/
           mv ${{ env.RESOURCES_PATH }}/style.css _site/
           mv ${{ env.RESOURCES_PATH }}/script.js _site/
           mv ${{ env.RESOURCES_PATH }}/manifest.json _site/
      - name: Fix permissions
        run: |
         chmod -c -R +rX "_site/" | while read line; do
           echo "::warning title=Invalid file permissions automatically fixed::$line"
         done


      - name: Replace placeholders with env vars
        run: |
          # Export all workflow env vars to shell
          export PROJECT="${{ env.PROJECT }}"
          export COMPANY="${{ env.COMPANY }}"
          export VERSION="${{ env.VERSION }}"
          export DESCRIPTION="${{ env.DESCRIPTION }}"
          export AUTHOR="${{ env.AUTHOR }}"
          export LICENSE="${{ env.LICENSE }}"
          export CREDITS="${{ env.CREDITS }}"
          export ORIENTATION="${{ env.ORIENTATION }}"
          export WINDOW_MODE="${{ env.WINDOW_MODE }}"
          export ICON_PATH="${{ env.ICON_PATH }}"
          export ASSETS_PATH="${{ env.ASSETS_PATH }}"
          export RESOURCES_PATH="${{ env.RESOURCES_PATH }}"
          export INCLUDE_PATH="${{ env.INCLUDE_PATH }}"
          export SOURCE_PATH="${{ env.SOURCE_PATH }}"

          # Replace placeholders in all relevant files
          for file in _site/index.html _site/script.js _site/style.css _site/manifest.json; do
            envsubst < "$file" > "$file.tmp" && mv "$file.tmp" "$file"
          done

      - name: Prepare icon folder
        run: |
          ICON_DIR=$(dirname "${{ env.ICON_PATH }}")
          mkdir -p "_site/$ICON_DIR"
          cp "${{ env.ICON_PATH }}" "_site/$ICON_DIR/"
      
      - name: Upload
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site/
        
 # Deploy job
  deploy:
    # Add a dependency to the build job
    needs: build-web

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    # Specify runner + deployment step
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 # or the latest "vX.X.X" version tag for this action
